<?xml version="1.0"?>
<doc>
    <assembly>
        <name>View.Core</name>
    </assembly>
    <members>
        <member name="T:View.Core.Extensions.DateTimeExtension">
            <summary>
            <see cref="T:System.DateTime"/> 扩展类。
            </summary>
        </member>
        <member name="M:View.Core.Extensions.DateTimeExtension.ToUnixTimeStamp(System.DateTime,View.Core.Models.UnixTimeStampUnit)">
            <summary>
            将时间转换为 Unix 时间戳
            </summary>
            <param name="dateTime">给定的时间</param>
            <param name="unit">Unix 时间戳单位</param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.DateTimeExtension.IsNull(System.DateTime)">
            <summary>
            日期是否为空 或 默认时间(0001-1-1 00:00:00)
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.DateTimeExtension.IsNullOrOverdue(System.DateTime)">
            <summary>
            日期是否为空 或 默认时间(0001-1-1 00:00:00) 或 过期 (即指定的日期是否已经超过了此时此刻)
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:View.Core.Extensions.EnumExtension">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:View.Core.Extensions.EnumExtension.Remove``1(System.Enum,``0)">
            <summary>
            移除位域枚举中指定的值
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enum"></param>
            <param name="_enum"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.EnumExtension.ToDescription(System.Enum)">
            <summary>
            获取枚举类型的描述。
            </summary>
            <param name="enum"></param>
            <returns>枚举描述信息</returns>
        </member>
        <member name="T:View.Core.Extensions.ExpressionToSqlExtension">
            <summary>
            Lambda 表达式扩展
            </summary>
        </member>
        <member name="T:View.Core.Extensions.ExpressionToSqlExtension.ExpressHandler">
            <summary>
            内部处理方法
            </summary>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ExpressHandler.ToSql(System.Linq.Expressions.ExpressionType)">
            <summary>
            运算符 解析
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ExpressHandler.ToSqlValue(System.Object)">
            <summary>
            将常量表达式转换为 <see langword="SQL"/> 值形式。
            <para>
            • <see cref="T:System.String"/>、<see cref="T:System.Char"/>、<see cref="T:System.DateTime"/> 类型 使用 <c>''</c> 包裹 <br />
            • <see cref="T:System.DateTime"/> 类型 的数据使用 <see cref="P:View.Core.Extensions.ExpressionToSqlExtension.DateTimeFormat"/> 格式化 <br />
            • <see cref="T:System.Boolean"/> 类型 的数据格式化为 1(<see langword="true"/>) 或 0(<see langword="false"/>) <br />
            • <see cref="T:System.Enum"/> 类型 的数据格式化为 <see cref="T:System.Int32"/> 类型 <br />
            • 其它 类型使用 <see cref="M:System.Object.ToString"/> 转换为此对象的字符串表达形式 <br />
            </para>
            </summary>
            <param name="value">常量表达式</param>
            <returns>Sql 中的值表达形式</returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ExpressHandler.IsDateTimeDefaultProperty(System.Linq.Expressions.MemberExpression)">
            <summary>
            判断属性是否是 <see cref="T:System.DateTime"/> 结构的默认属性
            </summary>
            <param name="member">属性表达式</param>
            <returns></returns>
        </member>
        <member name="P:View.Core.Extensions.ExpressionToSqlExtension.DateTimeFormat">
            <summary>
            获取或设置 格式化日期时所采用的格式化字符串
            <para>默认使用 <see cref="P:View.Core.Values.DateTimeValue.NormalDateTimeFormat"/> 格式化</para>
            </summary>
        </member>
        <member name="P:View.Core.Extensions.ExpressionToSqlExtension.HasPriority">
            <summary>
            获取或设置 在构造条件时是否确定优先级 ( 即 : 是否使用括号包含不同优先级的表达式 )
            <para>默认不确定优先级</para>
            </summary>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.SetConfigurations``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            设置 解析时采用的配置文本
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lambda"></param>
            <param name="dateTimeFormat">格式化日期时所采用的格式化字符串</param>
            <param name="hasPriority">在构造条件时是否确定优先级</param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            将 Lambda 表达式转为 sql 条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lambda"></param>
            <exception cref="T:System.NotSupportedException"/>
            <returns>sql 条件表达式</returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.Expression)">
            <summary>
            不同类型的表达式 解析
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.NotSupportedException"/>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Lambda 表达式 解析
            </summary>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.BinaryExpression)">
            <summary>
            二元运算符表达式 解析
            </summary>
            <param name="binary"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.ConstantExpression)">
            <summary>
            常量表达式转为 sql 
            </summary>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.UnaryExpression)">
            <summary>
            一元运算符表达式 处理
            </summary>
            <param name="unary"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            方法调用表达式 解析
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.ExpressionToSqlExtension.ToSql(System.Linq.Expressions.MemberExpression)">
            <summary>
            字段或属性表达式 解析
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:View.Core.Extensions.SqlMethods">
            <summary>
            表示 Sql 中的一些方法
            </summary>
        </member>
        <member name="M:View.Core.Extensions.SqlMethods.In``1(``0,System.Collections.Generic.List{``0})">
            <summary>
            确定 <paramref name="value"/> 是否在 <paramref name="list"/> 中。
            <para>in 方法</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">指定的值</param>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.SqlMethods.NotIn``1(``0,System.Collections.Generic.List{``0})">
            <summary>
            确定 <paramref name="value"/> 是否不在 <paramref name="list"/> 中。
            <para>in 方法</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">指定的值</param>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="T:View.Core.Extensions.IEntityExtension">
            <summary>
            <see cref="T:View.Core.Interfaces.IEntity"/> 扩展类。
            </summary>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToByteArrayContent(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 基于字节数组的 <see cref="T:System.Net.Http.HttpContent"/> 。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToFormUrlEncodedContent(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 使用 <see langword="application/x-www-form-urlencoded MIME"/>  类型编码的名称/值元组的 <see cref="T:System.Net.Http.HttpContent"/> 。
            </summary>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToMultipartContent(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 使用多部分 <see langword="/*"/> 内容类型的 <see cref="T:System.Net.Http.HttpContent"/> 。
            </summary>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToMultipartFormDataContent(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 使用 <see langword="multipart/form-data MIME"/>  类型进行编码的 <see cref="T:System.Net.Http.HttpContent"/> 。
            </summary>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToStreamContent(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 基于流的 <see cref="T:System.Net.Http.HttpContent"/> 。
            </summary>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToStringContent(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 基于字符串的 <see cref="T:System.Net.Http.HttpContent"/> 。
            </summary>
            <returns></returns>
        </member>
        <member name="M:View.Core.Extensions.IEntityExtension.ToQuery(View.Core.Interfaces.IEntity)">
            <summary>
            将实体类 <see cref="T:View.Core.Interfaces.IEntity"/> 转换为 查询字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="T:View.Core.Extensions.ListExtension">
            <summary>
            List 扩展类
            </summary>
        </member>
        <member name="M:View.Core.Extensions.ListExtension.FindRecursion``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            递归查找整个列表中满足条件的项目
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:View.Core.Extensions.LongExtension">
            <summary>
            <see cref="T:System.Int64"/> 扩展类。
            </summary>
        </member>
        <member name="M:View.Core.Extensions.LongExtension.ToDateTime(System.Int64,View.Core.Models.UnixTimeStampUnit)">
            <summary> 
            根据 Unix 时间戳获取 Utc 时间。
            </summary>  
            <param name="timeStamp">Unix 时间戳</param>
            <param name="unit">Unix 时间戳单位</param>
            <returns>Unix 时间戳的 Utc 时间形式</returns>
        </member>
        <member name="T:View.Core.Extensions.StringExtension">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:View.Core.Extensions.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            指示指定的字符串是 <see langword="null"/> 还是 <see cref="F:System.String.Empty"/> 字符串。
            </summary>
            <param name="value">指定的字符串</param>
            <returns>如果参数 <paramref name="value"/> 为 <see langword="null"/> 或 空字符串("")，则为 <see langword="true"/>；否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:View.Core.Extensions.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            指示指定的字符串是 <see langword="null"/> 、空还是仅由空白字符串组成。
            </summary>
            <param name="value">指定的字符串</param>
            <returns>如果参数 <paramref name="value"/> 为 <see langword="null"/> ，空字符串("")或仅由空白字符组成，则为 <see langword="true"/>；否则为 <see langword="false"/>。</returns>
        </member>
        <member name="T:View.Core.Interfaces.IEntity">
            <summary>
            实体类 接口
            </summary>
        </member>
        <member name="T:View.Core.Models.Pagination">
            <summary>
            分页标记
            </summary>
        </member>
        <member name="F:View.Core.Models.Pagination._count">
            <summary>
            总页码数
            </summary>
        </member>
        <member name="M:View.Core.Models.Pagination.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个页码标记
            </summary>
            <param name="index"></param>
            <param name="size"></param>
        </member>
        <member name="P:View.Core.Models.Pagination.Index">
            <summary>
            当前需要的页码
            <para>默认 1</para>
            <para><see cref="P:View.Core.Models.Pagination.Index"/>&gt;0</para>
            </summary>
        </member>
        <member name="P:View.Core.Models.Pagination.Count">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:View.Core.Models.Pagination.Size">
            <summary>
            每一页的数据量
            <para>默认 10</para>
            <para><see cref="P:View.Core.Models.Pagination.Index"/>&gt;=1</para>
            </summary>
        </member>
        <member name="M:View.Core.Models.Pagination.GetResult``1(``0,System.Int32)">
            <summary>
            使用结果数据和数据量创建一个分页结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">结果</param>
            <param name="count">数据总量，不是页码数</param>
            <returns></returns>
        </member>
        <member name="T:View.Core.Models.PaginationResult`1">
            <summary>
            包含结果的分页标记
            </summary>
        </member>
        <member name="M:View.Core.Models.PaginationResult`1.#ctor(`0,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化一个包含结果的页码标记
            </summary>
            <param name="data">结果数据</param>
            <param name="index">当前页</param>
            <param name="Size"></param>
            <param name="count"></param>
        </member>
        <member name="P:View.Core.Models.PaginationResult`1.Data">
            <summary>
            结果数据
            </summary>
        </member>
        <member name="T:View.Core.Models.UnixTimeStampUnit">
            <summary>
            Unix 时间戳的单位
            </summary>
        </member>
        <member name="F:View.Core.Models.UnixTimeStampUnit.Seconds">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:View.Core.Models.UnixTimeStampUnit.Milliseconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="T:View.Core.Values.DateTimeValue">
            <summary>
            日期的默认值
            </summary>
        </member>
        <member name="P:View.Core.Values.DateTimeValue.Null">
            <summary>
            new <see cref="T:System.DateTime"/> 的值。
            </summary>
        </member>
        <member name="P:View.Core.Values.DateTimeValue.UnixZero">
            <summary>
            Unix 时间戳 0 的值。
            <para>ISO 8601规范 : 1970-01-01T00:00:00Z</para>
            </summary>
        </member>
        <member name="P:View.Core.Values.DateTimeValue.StandardDateTimeFormat">
            <summary>
            标准时间格式化字符串。符合 ISO 8601 标准
            <para><see langword="yyyy-MM-ddTHH:mm:ss.fffffffK"/></para>
            </summary>
        </member>
        <member name="P:View.Core.Values.DateTimeValue.NormalDateTimeFormat">
            <summary>
            通用的时间格式化字符串。
            <para><see langword="yyyy-MM-dd HH:mm:ss"/></para>
            </summary>
        </member>
    </members>
</doc>
